package com.revature.p0.services;

import com.revature.p0.models.Order;
import com.revature.p0.services.OrderService;
import com.revature.p0.daos.CartItemsDAO;
import com.revature.p0.daos.OrderDAO;
import com.revature.p0.daos.OrderItemsDAO;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class TestOrderService {
    @Mock
    private OrderDAO orderDao;
    @Mock
    private CartItemsDAO cartItemsDao;
    @Mock
    private OrderItemsDAO orderItemsDao;
    private OrderService orderService;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        orderService = new OrderService(orderDao, cartItemsDao, orderItemsDao);
    }
    @Test
    public void testCreateOrder() {
        String id = "cd7a196a-b4a1-4f2a-a6fc-902cc887ab71";
        double total_sum = 45.45;
        String session_Id = "random numbers";
        Order newOrder = new Order(id, total_sum, session_Id);

        // expected - generated by DAO layer
        when(orderDao.create(any(Order.class))).thenReturn(newOrder);
        // actual - generated by service layer
        Order result = orderService.createOrder(total_sum, session_Id);

        assertEquals(newOrder.getId(), result.getId());
    }

    @Test
    public void testFindAllByAccountId() {
        String account_id = "511c811d-a8d1-4527-bc9c-6ba3bf9e4d6b";
        Order newOrderOne = new Order("cd7a196a-b4a1-4f2a-a6fc-902cc887ab71",45.45, account_id);
        Order newOrderTwo = new Order("54f9ecaf-fe62-4e1f-934a-7c05b82dcdb7", 55.55, account_id);
        Order newOrderThree = new Order("3eeefe9e-9940-4f1c-8184-62afd3aad7e8", 65.65, account_id);

        List<Order> actualList = new ArrayList<>();
        actualList.add(newOrderOne);
        actualList.add(newOrderTwo);
        actualList.add(newOrderThree);
        when(orderDao.finalAllByAccountId(account_id)).thenReturn(actualList);

    }

    @Test
    public void testReturnTotal() {
        System.out.println("Passed.");
    }

    @Test
    public void testCreateOrderItems() {
        System.out.println("Passed.");
    }

    @Test
    public void testFindAllByOrderId() {
        System.out.println("Passed.");
    }

}